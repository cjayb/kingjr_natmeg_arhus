function cfg = myvenn(data,cfg)
% plot 2 venn circles and in an overall population
% necessitates circle.m to draw circle
% (c) JeanRÃ©mi King, jeanremi.king+matlab@gmail.com
% adapted from vennX.m (Jeremy Heil 2004)
if ~isfield(cfg, 'resolution'), cfg.resolution  = 50;               end
if ~isfield(cfg, 'style'),      cfg.style       = {'k-';'r-';'b-'}; end
if ~isfield(cfg, 'position'),   cfg.position    = [0 0];            end

%-- distances
dist_A_B = venn2( data(1)+data(3), data(2)+data(4), data(2)+data(4), resolution );
dist_B_C = venn2( data(2)+data(2), data(4)+data(7), data(5)+data(6), resolution );
dist_A_C = venn2( data(1)+data(2), data(6)+data(7), data(4)+data(5), resolution );

%-- radius
   r1 = sqrt( (a+b+f+g)/pi );
    r2 = sqrt( (b+c+d+g)/pi );
    r3 = sqrt( (d+e+f+g)/pi );
    
[r1 r2 r3] = deal(data(1)/pi,data(2)/pi,data(3)/pi);

%-- geometrical solution of venn problem for 3 circles
y = ( dist_A_C^2 - dist_B_C^2 + dist_A_B^2 ) / 2 / dist_A_B;
size_x = max( r1 + dist_A_B + r2, 2*r3 );
size_y = max( r1, r2 ) + sqrt( dist_A_C^2 - y^2 ) + r3;

%-- find the circle centers
center1 = [r1;max( r1, r2 )];
center2 = [r1 + dist_A_B; center1(2)];
center3 = [r1 + y;center1(2) + sqrt( dist_A_C^2 - y^2 )];

[X,Y]   = meshgrid(0:resolution:size_x, 0:resolution:size_y);

%draw the circles
h=ishold;
hold on;
s1=circle(center1+ cfg.position,r1,cfg.resolution,cfg.style{1});
s2=circle(center2+ cfg.position,r2,cfg.resolution,cfg.style{2});
s3=circle(center3+ cfg.position,r3,cfg.resolution,cfg.style{3});
%-- returns hold
if ~h, hold off;end 

%-- return answers
cfg.radius  = [r1 r2 r3];
cfg.centers = [center1 ;center2; center3]+ repmat(cfg.position,3,1);
cfg.handles = [s1 s2 s3];


function dist = venn2( a, b, c, resolution )
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %VENN2
    %  dist = venn2( a, b, c, resolution )
    %
    % Computes the distance between the centers of 
    % the two venn diagram circles.
    %
    % a          - values of A
    % b          - value of A and B
    % c          - value of B
    % resolution - measure of error 
    %
    % dist       - the distance between the two centers
    %
    %  Does this by plotting the two circles in an
    % image with the specified resolution and
    % moving the centers towards each other until
    % the area of intersection is nearest the value
    % of b
    %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    r1 = sqrt( (a+b)/pi );
    r2 = sqrt( (b+c)/pi );
    
    size_x = 2*r1+2*r2;
    size_y = max( 2*r1, 2*r2 );
    
    center1_x = r1;
    center1_y = size_y/2;
    center2_x = 2*r1 + r2;
    center2_y = size_y/2;;
    
    [X,Y] = meshgrid( 0:resolution:size_x, 0:resolution:size_y );
    
    for new_center = (2*r1 + r2):-resolution:r1
    
        img = zeros( size(Y,1), size(Y,2) );
        img = and( (X - center1_x).^2 + (Y - center1_y).^2 < r1^2, ...
            (X - new_center).^2 + (Y - center2_y).^2 < r2^2 );
    
        if sum(sum(img)) * resolution^2 > b
            break
        end
    end
    
    dist = new_center - center1_x;